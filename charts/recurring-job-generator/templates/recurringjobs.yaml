{{- /* $generatedJobs is fed into a range to generate each RecurringJob */}}
{{- $generatedJobs := dict -}}

{{- /* $generatedGroups is a dict whose keys are the names of the generated jobs
      and the values of those keys are an array of group names */}}
{{- $generatedGroups := dict -}}
{{- /* See below for an example of these objects */}}

{{- /* First round, populate $generatedJobs and $generatedGroups */}}
{{- range $groupName, $groupSettings := .Values.groups -}}
  {{- range $jobType, $job := $groupSettings -}}
    {{- if or (eq $jobType "snapshot") (eq $jobType "backup") -}}
      {{- range $job -}}
        {{- $concurrency := ( .concurrency | default $.Values.defaultConcurrency ) -}}

        {{- /* Example $jobName: snapshot-10m-retain-1-concurrency-4 */}}
        {{- $jobName := printf "%s-%s-retain-%s-concurrency-%s" $jobType .interval (.retain | toString) ( $concurrency | toString ) -}}

        {{- $jobProperties := dict -}}
        {{- $_ := set $jobProperties "interval" .interval -}}
        {{- $_ := set $jobProperties "jobType" $jobType -}}
        {{- $_ := set $jobProperties "retain" .retain -}}
        {{- $_ := set $jobProperties "concurrency" $concurrency -}}

        {{- $_ := set $generatedJobs $jobName $jobProperties -}}
        {{- $existingGroupList := get $generatedGroups $jobName | default list -}}
        {{- /* Set and deduplicate the groups for this $jobName */}}
        {{- $_ := set $generatedGroups $jobName ( append $existingGroupList $groupName | uniq ) -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- $numberOfGroups := len $generatedGroups -}}
{{- $jobIndex := 0 -}}

{{- /* Second round, calculate cron expressions for the jobs based on how many jobs there are */}}
{{- range $groupName, $groupSettings := .Values.groups -}}
  {{- range $jobType, $job := $groupSettings -}}
    {{- if or (eq $jobType "snapshot") (eq $jobType "backup") -}}
      {{- range $job -}}
        {{- $concurrency := ( .concurrency | default $.Values.defaultConcurrency ) -}}
        {{- /* Example $jobName: snapshot-10m-retain-1-concurrency-4 */}}
        {{- $jobName := printf "%s-%s-retain-%s-concurrency-%s" $jobType .interval (.retain | toString) ( $concurrency | toString ) -}}

        {{- $jobProperties := get $generatedJobs $jobName -}}

        {{- /* These values will always get overwritten, we just need an initial value */}}
        {{- $minute := "99" -}}
        {{- $hour := "99" -}}
        {{- $day := "99" -}}

        {{- $minuteStep := int $.Values.minuteStep -}}
        {{- /* Here we set the minute for cron expressions that have other fields set */}}
        {{- if not (regexMatch "[0-9]+m" .interval) -}}
          {{- if $.Values.spreadCronStartTimes -}}
            {{- /* Use modulus to pick a minute between 0 and 59, in $minuteStep minute intervals */}}
            {{- $minuteOptions := untilStep 0 59 $minuteStep -}}
            {{- $minute = (toString (index $minuteOptions (mod $jobIndex (len $minuteOptions)))) -}}
          {{- else -}}
            {{- $minute = "0" -}}
          {{- end -}}
        {{- else -}}
          {{- /* The interval was something like "10m", so make $minute equals something like "35/10" */}}
          {{- $minuteInterval := trimSuffix "m" .interval -}}
          {{- /* Make a list of all the possible options that are $minuteStep apart but less than $minuteInterval */}}
          {{- $minuteOptions := untilStep 0 (atoi $minuteInterval) $minuteStep -}}
          {{- /* Use modulus to pick a minute between 0 and $minuteInterval */}}
          {{- $customMinuteStart := index $minuteOptions (mod $jobIndex (len $minuteOptions)) -}}
          {{- $minute = (printf "%s/%s" ($customMinuteStart | toString) $minuteInterval) -}}
        {{- end -}}
        
        {{- $hourStep := int $.Values.hourStep -}}
        {{- if or (regexMatch "[0-9]+m" .interval) (eq "1h" .interval) -}}
          {{- $hour = "*" -}}
        {{- /* Here we set the hour for cron expressions that have days or more set */}}
        {{- else if not (regexMatch "[0-9]+h" .interval) -}}
          {{- if $.Values.spreadCronStartTimes -}}
            {{- $hourOptions := untilStep 0 23 $hourStep -}}
            {{- $hour = (toString (index $hourOptions (mod $jobIndex (len $hourOptions)))) -}}
          {{- else -}}
            {{- $hour = "0" -}}
          {{- end -}}
        {{- else -}}
          {{- $hourInterval := trimSuffix "h" .interval -}}
          {{- /* Make a list of all the possible options that are $hourStep apart but less than $hourInterval */}}
          {{- $hourOptions := untilStep 0 (atoi $hourInterval) $hourStep -}}
          {{- /* Use modulus to pick an hour between 0 and $hourInterval */}}
          {{- $customHourStart := index $hourOptions (mod $jobIndex (len $hourOptions)) -}}
          {{- $hour = (printf "%s/%s" ($customHourStart | toString) $hourInterval) -}}
        {{- end -}}

        {{- $day := "*" -}}
        {{- /* If minutes, hours or '1d' is set, $day = "*" */}}
        {{- if or (or (regexMatch "[0-9]+m" .interval) (regexMatch "[0-9]+h" .interval) (eq "1d" .interval)) -}}
          {{- $day = "*" -}}
        {{- else -}}
          {{- $dayInterval := trimSuffix "d" .interval | toString -}}
          {{- /* We should always use "*" which evaluates to "Every X days" */}}
          {{- $day = (printf "*/%s" ($dayInterval | toString)) -}}
        {{- end -}}

        {{- $cron := printf "%s %s %s * *" $minute $hour $day -}}
        {{- $_ := set $jobProperties "cron" $cron -}}
        {{- $_ := set $generatedJobs $jobName $jobProperties -}}
        {{- $jobIndex = add1 $jobIndex -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- /*
What $generatedJobs looks like
$generatedJobs:
  snapshot-10m-retain-1-concurrency-4:
    interval: 10m
    cron: "0/10 * * * *"
    retain: 1
    jobType: snapshot
    concurrency: 4
  snapshot-1h-retain-1-concurrency-4:
    [...]

What $generatedGroups looks like
$generatedGroups:
  snapshot-10m-retain-1-concurrency-4:
    - ExampleGroup
    - OtherGroup
  snapshot-1h-retain-1-concurrency-4:
    - [...]
*/}}

{{- range $name, $properties := $generatedJobs }}
apiVersion: longhorn.io/v1beta1
kind: RecurringJob
metadata:
  name: {{ $name }}
  {{- with $.Values.namespaceOverride }}
  namespace: {{ . }}
  {{- end }}
spec:
  cron: {{ $properties.cron | quote }}
  task: {{ $properties.jobType }}
  groups:
  {{- range (get $generatedGroups $name ) }}
    - {{ . }}
  {{- end }}
  retain: {{ $properties.retain }}
  concurrency: {{ $properties.concurrency }}
  labels:
    jobName: {{ $name }}
---
{{- end }}
